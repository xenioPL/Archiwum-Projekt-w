#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std ;
vector <vector <int> > graph;
vector <int> values;
vector <int> seen;

int smallest_not_seen()
{
    int mini = 999999;
    int mini_index = -1;
    for(int i =0;i<values.size();i++)
    {
        if(seen[i] == 0)
        if(mini > values[i])
        {
            mini = values[i];
            mini_index = i;
        }

    }
    return mini_index;
}

int djikstra(int place,int finish)
{
    if(place == finish)
    {
        cout<<values[place]<<endl;
        return 0;
    }
    if(place == -1)
    {
        cout<<"nie ma"<<endl;
        return 0;
    }
seen[place] = 1;
 for(int i =0;i<graph[place].size();i += 2)
 {
     if(values[graph[place][i]] > values[place] + graph[place][i+1])
     {
     values[graph[place][i]] = values[place] + graph[place][i+1];
     }
 }
 int temp = smallest_not_seen();
    return djikstra(temp,finish);

}

int main()
{
int n,x,y,m,z;
long long int suma = 0;
cin>>n>>m;
vector <int> a;
for(int i =0;i<n;i++)
{graph.push_back(a);
values.push_back(999999);
seen.push_back(0);
}

for(int i = 0;i<m;i++)
{
 cin>>x>>y>>z;
 graph[x].push_back(y);
 graph[x].push_back(z);
 graph[y].push_back(x);
 graph[y].push_back(z);
}
int k;
cin>>k;
while(k--)
{
for(int i =0;i<n;i++)
{
values[i]=999999;
seen[i]=0;
}
cin>>x>>y;
values[x] = 0;
djikstra(x,y);
}

    return 0;
}
